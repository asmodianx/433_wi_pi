Steps for building the 433-wi-pi mobile sigint sensor

Install pre requisites:
        apt-get install gpsd chrony gpsd-clients kismet \
        kismet-plugins git libtool libusb-1.0.0-dev librtlsdr-dev \
        rtl-sdr build-essential autoconf cmake pkg-config

Objectives:
==========================
configure gps

pico /etc/default/gpsd
        # Default settings for the gpsd init script and the hotplug wrapper.
        # Start the gpsd daemon automatically at boot time
        START_DAEMON="true"
        # Use USB hotplugging to add new USB devices automatically to the daemon
        USBAUTO="true"
        # Devices gpsd should collect to at boot time.
        # They need to be read/writeable, either by user gpsd or the group dialout.
        DEVICES="/dev/ttyACM0"
        # Other options you want to pass to gpsd
        GPSD_OPTIONS="-n -F /tmp/gpsd.sock"
===========================
configure chronyd
pico /etc/chrony/chrony.conf

        pool 2.debian.pool.ntp.org iburst
        keyfile /etc/chrony/chrony.keys
        driftfile /var/lib/chrony/chrony.drift
        logdir /var/log/chrony
        maxupdateskew 100.0
        hwclockfile /etc/adjtime
        rtcsync
        allow
        makestep 1 3
        refclock SHM 0 refid GPS precision 1e-1 offset 0.232 delay 0.2
        refclock SOCK /var/run/chrony/chrony.ttyACM0.sock refid PPS
=============================
configure kismet
pico /etc/kismet/kismet.conf

Add:
        ncsource=wlan0
        logprefix=/var/log/kismet
        syslogtype=all

Change:
        gps=false to gps=true

(kismet does not work with Raspi zero or 3 wifi)

optional for bluetooth add:
        ncsource=hci0

create service file:
pico /etc/systemd/system/kismet.service

        [Unit]
        Description=Kismet server
        After=gpsd.service multi-user.target

        [Service]
        SuccessExitStatus=0 1
        ExecStart=/usr/bin/kismet_server -s
        Restart=always
        RestartSec=5

        [Install]
===========================================
rtl_433 gps log

gps_filter.sh
#!/bin/bash
while read -r line
do
        GPS=`cat /tmp/gps.txt`
        output="$GPS $line"
        echo $output
done < "${1:-/dev/stdin}"

gps.sh
#!/bin/bash
gpstmp=`mktemp`
GPS=`gpspipe -w|grep -m 1 "TPV"|cut -d , -f 6,7`
lat=`echo $GPS|cut -d , -f 1 |cut -d : -f2`
lon=`echo $GPS|cut -d , -f 2 |cut -d : -f2`
echo $lat,$lon > $gpstmp
chmod 644 $gpstmp
mv $gpstmp /tmp/gps.txt 

crontab -e
 * * * * * /usr/local/bin/gps.sh

=================================
install rtl_433
compile:
        git clone https://github.com/merbanan/rtl_433.git
        cd rtl_433
        mkdir build
        cd build
        cmake ..
        make all
        make install

create script:
pico /usr/local/bin/rtl_433.sh
        #!/bin/bash
        /usr/local/bin/rtl_433 -F json -G|logger -t rtl_433

create service:
pico /etc/systemd/system/rtl_433.service

        [Unit]
        Description=rtl_433
        After=network.target auditd.service

        [Service]
        SuccessExitStatus=0 1
        ExecStart=/usr/local/bin/rtl_433.sh
        Restart=always
        RestartSec=3
        [Install]
        WantedBy=multi-user.targetmake install

service:
=================================
log gps:

crontab -e

add:
        */2 * * * * cat /tmp/gps.txt|logger

====================================
save logfiles
pico /etc/fstab
add:
        /dev/sda1 /mnt vfat defaults,user,noauto 0 0

pico /usr/local/bin/button.py

Add momentary button leads to pin's 9 and 11

        #!/usr/bin/python
        import RPi.GPIO as GPIO
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(17, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        if GPIO.input(17):
                print "0"
        else:
                print "1"
        
        GPIO.cleanup()
        
pico /usr/local/bin/record_shutdown.sh
        #!/bin/bash
        BUTTON=`/usr/local/bin/button.py`
        if [ -f /tmp/shutdown ]; then
                echo "Already shutting down"
        else
                touch /tmp/shutdown
                if [ $BUTTON = "1" ]; then
                        mount /mnt
                        rm /mnt/*.tgz
                        /root/logs.sh
                        sync
                        umount /mnt
                        sync
                        rm /tmp/shutdown
                        halt -p
                else
                        echo "Button is $BUTTON, Not shutting down"
                fi
        fi

=======================================
gpsd_syslog.py (see github file)

pico /etc/systemd/system/gpsd_syslog.service
        [Unit]
        Description=Python GPSD Syslog
        After=gpsd.service multi-user.target
        [Service]
        SuccessExitStatus=0 1
        ExecStart=/usr/local/bin/gpsd_syslogd.py
        [Install]
        WantedBy=multi-user.target

pico /etc/rsyslog.d/00-433wipi.conf
        :syslogtag, contains, "rtl_433"
        @127.0.0.1:2514
        :syslogtag, contains, "seckc_wi_pi"
        @127.0.0.1:2514


=======================================

Enable services:
        systemctl enable rtl_433
        systemctl enable kismet
        systemctl enable chrony
        systemctl enable gpsd
        systemctl enable gpsd_syslog
        
===========================================
RTC
adafruit ds1307
(subject to time drift but moot because we have GPS disiplined time service running.  This is for initial boot so we dont get time skew)

install :
Wiring is simple:
1. Connect VCC on the breakout board to the 5.0V pin of the Pi (if using DS1307) Connect VCC on the breakout board to the 3.3V pin of the Pi (if using PCF8523 or DS3231)
2. Connect GND on the breakout board to the GND pin of the Pi
3. Connect SDA on the breakout board to the SDA pin of the Pi
4. Connect SCL on the breakout board to the SCL pin of the Pi

sudo apt-get install python-smbus i2c-tools

run raspi-config
enable i2c
reboot

verify that device is connected
sudo i2cdetect -y 1
look for ID #68

ou can add support for the RTC by adding a device tree overlay. Run
sudo nano /boot/config.txt
to edit the pi configuration and add whichever matches your RTC chip:
dtoverlay=i2c-rtc,ds1307

sudo apt-get -y remove fake-hwclock
sudo update-rc.d -f fake-hwclock remove

Run sudo nano /lib/udev/hwclock-set and comment out these three lines:
#if [ -e /run/systemd/system ] ; then # exit 0 #fi

check hw time
sudo hwclock -D -r

write hw time
sudo hwclock -w


